# /run_tests.py
"""
K·ªãch b·∫£n ch·∫°y ki·ªÉm th·ª≠ t√πy ch·ªânh ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ v·ªÅ m√¥i tr∆∞·ªùng.
Thay v√¨ ch·∫°y 'pytest', b·∫°n s·∫Ω ch·∫°y 'python run_tests.py'.
"""

import pytest
from unittest.mock import patch
import sys

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ c·∫•u h√¨nh m√¥i tr∆∞·ªùng v√† ch·∫°y pytest.
    """
    print("üöÄ applying agno @tool patch and running tests...")

    # ƒê√¢y l√† m·ªôt decorator gi·∫£, n√≥ nh·∫≠n v√†o b·∫•t k·ª≥ tham s·ªë n√†o c·ªßa @tool
    # v√† tr·∫£ v·ªÅ m·ªôt decorator kh√°c ch·ªâ c√≥ nhi·ªám v·ª• tr·∫£ v·ªÅ h√†m g·ªëc.
    def identity_decorator(*args, **kwargs):
        def decorator(func):
            return func
        return decorator

    # S·ª≠ d·ª•ng patch c·ªßa unittest.mock ƒë·ªÉ thay th·∫ø 'agno.tools.tool'
    # b·∫±ng decorator gi·∫£ c·ªßa ch√∫ng ta.
    # 'patch' s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c √°p d·ª•ng trong kh·ªëi 'with'.
    with patch('agno.tools.tool', new=identity_decorator):
        # L·∫•y c√°c tham s·ªë d√≤ng l·ªánh (n·∫øu c√≥), tr·ª´ t√™n c·ªßa ch√≠nh script n√†y
        args = sys.argv[1:]
        
        # N·∫øu kh√¥ng c√≥ tham s·ªë n√†o ƒë∆∞·ª£c truy·ªÅn, th√™m '-v' ƒë·ªÉ c√≥ output chi ti·∫øt
        if not args:
            args.append('-v')
            
        # G·ªçi h√†m main c·ªßa pytest v·ªõi c√°c tham s·ªë ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        exit_code = pytest.main(args)
        
        # Tr·∫£ v·ªÅ exit code c·ªßa pytest
        sys.exit(exit_code)

if __name__ == "__main__":
    main()
